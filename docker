#!/bin/bash
set -euo pipefail

if [ -z "$(which docker)" ]; then
    echo "Docker is not installed. Please install docker to use this script."
    exit 1
fi

version="0.1.0"
context="${KANTUI_CONTEXT:-default}"
kantui_dir="${KANTUI_HOME:-$HOME/.kantui}"
data_file="$kantui_dir/contexts/$context/data.json"
image_tag="kantui:$version"
container_name="kantui-$version"
# make docker output less chatty
export DOCKER_CLI_HINTS="false"
# Is TTY supported?
test -t 1 && USE_TTY="-t"

# Create a workspace area for temporary files to do build with.
workspace="/tmp/.kantui-cli"
mkdir -p $workspace

cd $workspace

cat >Dockerfile <<EOF
FROM php:8.3-cli-alpine


WORKDIR /app
ARG UID=1000
ARG GID=1000
ARG PHP_EXTS="pcntl"
ARG DEBIAN_FRONTEND=noninteractive

RUN addgroup -g \$GID kantui && adduser -u \$UID -S kantui -G kantui
RUN apk --no-cache update \\
    && apk --no-cache add \\
        vim \\
    && docker-php-ext-install -j\$(nproc) \${PHP_EXTS} \\
    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\
    && chown -R kantui:kantui /app/

USER kantui
RUN composer require surgiie/kantui:$version
ENV PATH=\$PATH:/app/vendor/bin

EOF

# Build docker image for the cli if not already present.
if [ -z "$(docker images -q $image_tag)" ]; then
    docker build -t $image_tag . --no-cache --build-arg UID=$(id -u) --build-arg GID=$(id -g)
    if [ $? -ne 0 ]; then
        echo "Failed to build docker image $image_tag"
        rm -rf $workspace
        exit 1
    fi
fi

# Change back to the original directory after we have built the docker image.
cd - >/dev/null
# Remove the workspace after we have built the docker image, these files are no longer needed.
rm -rf $workspace

start_container(){
    # remove dangling containers that may have exited but still show up during docker ps -a
    docker ps -a | grep $container_name >/dev/null && docker rm $container_name >/dev/null

    docker run --name "$container_name" -i ${USE_TTY} -d --user $(id -u):$(id -g) -v $kantui_dir:/home/kantui/.kantui "$image_tag" tail -f /dev/null
    echo "Waiting for container to start..."
    until [ "$(docker container inspect -f '{{.State.Running}}' $container_name 2>/dev/null)" = "true" ]; do
        sleep 1
    done
    clear
}

ensure_defaults(){
    if [ ! -f "$data_file" ]; then
        mkdir -p "$kantui_dir/contexts/$context"

cat >$data_file <<EOF
{
    "todo": [],
    "in_progress": [],
    "done": []
}
EOF
    fi
}

# Start up a container and keep running it if it is not already running.
if [ ! "$(docker container inspect -f '{{.State.Running}}' $container_name 2>/dev/null)" = "true" ]; then
    ensure_defaults
    start_container
fi

# if for some reason the volumes are missing or have been removed outside
# of container start, restart a container and ensure
# the data file is present/remounted back into the container.
if [ ! -f "$data_file" ]; then
    ensure_defaults
    docker stop $container_name
    docker rm $container_name
    start_container
fi


# determine the environment variables to pass to the container
env_vars=""
for var in $(env | grep '^KANTUI_'); do
    var_name=$(echo "$var" | cut -d'=' -f1)
    var_value=$(echo "$var" | cut -d'=' -f2-)
    env_vars="$env_vars --env $var_name=$var_value"
done

command="${1:-}"
if [ "$command" = "--attach" ]; then
    # command is sh by default
    container_command=${2:-sh}
    docker exec -i ${USE_TTY} ${env_vars} --env="PS1=╰─➤  (devcontainer) " $container_name $container_command
    exit $?
fi

# Then run the command in the container.
docker exec -i ${USE_TTY} ${env_vars} $container_name "kantui" "${@}"
# check if command succeeded
if [ $? -ne 0 ]; then
    echo "Failed to run kantui"
    exit 1
fi

